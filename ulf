#!/usr/bin/perl

# The MIT License (MIT)
#
# Copyright (c) 2014-2016 Johannes Bauer
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

use strict;
use warnings;


usage() if $#ARGV < 1;

# Stats
my %stats;
$stats{"langPhrases"} = 0;
$stats{"skipPhrases"} = 0;
$stats{"basePhrases"} = 0;

# existing phrases in language file ($langFile)
my %lang;

# Pattern for matching the translation key
my $keyPattern = qr/^\"(.+)\" =/;

# Pattern for skipping placeholder translations
# Every translation value embraced in angle braces is placeholder
# for dynamic values.
# e.g. "Kle-oF-pIz.text" = "<Label>";
my $skipValuePattern = qr/= \"(<.+>)\";$/;

# Default file encoding
my $defaultEncoding = "utf-16";

# Command line
my ($langFile, $baseFile, $outFile) = @ARGV;

#
# File encoding
#

my $langFileEncoding = `fileencoding $langFile`;

# removing BE or LE suffix of uft-16 encoding, which causes
# problems while reading or writing the file
if (substr($langFileEncoding, 0, 6) eq "utf-16") {
	$langFileEncoding = "utf-16";
}

print STDERR "Encoding of $langFile is $langFileEncoding\n";


#
# Language file (in)
#

open IN_LANG, "< :encoding($langFileEncoding)", $langFile
	or die "$langFile won't open: $!\n";

while (<IN_LANG>) {

	# looking for comments
	if (m/^\/\*/) {

		my $comment = $_;

		# if a line is a comment => the next line is a translation
		my $translation = <IN_LANG>;

		if ($translation =~ $keyPattern) {

			# save comment + translation using the key of the translation
			$lang{$1} = "$comment$translation\n";

			$stats{"langPhrases"}++;
		}
	}
}

close IN_LANG;

#
# Base file (in)
#

my $result;

open IN_BASE, "< :encoding($defaultEncoding)", $baseFile
	or die "$baseFile won't open $!\n";

while (<IN_BASE>) {

	if (m/^\/\*/) {

		my $comment = $_;
		my $translation = <IN_BASE>;

		if ($translation =~ $keyPattern) {

			my $key = $1;

			# Translations embraced in angle braces will be ignored, because they
			# are used as placeholders
			if ($translation =~ $skipValuePattern) {
				$stats{"skipPhrases"}++;
			}

			else {

				# if the translation already exists in the language file then keep it
				# unless use comment + translation of the base file
				$result .= $lang{$1} ? $lang{$1} : "$comment$translation\n";

				$stats{"basePhrases"}++;
			}
		}
	}
}

close IN_BASE;

#
# Language file (out)
#

if ($outFile) {

	open OUT_FILE, "> :encoding($defaultEncoding)", $outFile
		or die "$outFile won't open: $!\n";

	print OUT_FILE $result;

	close OUT_FILE;
}

else {
	print $result;
}

#
# Stats
#

print STDERR "Result: $stats{'basePhrases'} base phrases, $stats{'langPhrases'} language phrases, $stats{'skipPhrases'} phrases skipped\n\n";

exit;

#
# USAGE
#

sub usage {

	my @split = split("/", $0);

	print "usage: $split[-1] <lang_file> <base_file> [<out_file>]\n\n";
	exit;
}

